<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>VuCity QC Error Marking</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .container { margin-top: 20px; }
        .form-control, .btn { margin-bottom: 10px; }
        .drop-zone {
            border: 2px dashed #ccc;
            border-radius: 5px;
            text-align: center;
            padding: 20px;
            color: #ccc;
            cursor: pointer;
            margin-bottom: 10px;
        }
        .drop-zone.hover {
            border-color: #333;
            color: #333;
        }
        .drop-zone.success {
            border-color: #198754; /* Bootstrap success color */
            background-color: #198754; /* Added background color for visibility */
            color: white; /* Change text color for better readability */
        }
        .file-input {
            display: none;
        }
    </style>
    <script>
        function formatTileNumber() {
            var tileInput = document.getElementById('tileNumber');
            var tileValue = tileInput.value;
            if (tileValue.length === 4 && !tileValue.startsWith('TQ')) {
                tileInput.value = 'TQ' + tileValue;
            }
        }

        function formatBuildingNumber() {
            var buildingInput = document.getElementById('buildingNumber');
            var buildingValue = buildingInput.value;
            if (!buildingValue.startsWith('B')) {
                buildingInput.value = 'B' + buildingValue.padStart(9, '0');
            }
        }
    </script>
</head>
<body>
<div class="container">
    <h1>Upload Images</h1>
    <form action="/upload" method="post" enctype="multipart/form-data">
        <div class="mb-3">
            <label for="tileNumber" class="form-label">Tile Number:</label>
            <input type="text" class="form-control" id="tileNumber" name="tileNumber" onblur="formatTileNumber()" maxlength="9" pattern="TQ\d{4}" title="Tile number must be prefixed with 'TQ' followed by 4 digits.">
        </div>
        <div class="mb-3">
            <label for="errorComments" class="form-label">Error Comments:</label>
            <input type="text" class="form-control" name="errorComments">
        </div>
        <div class="mb-3">
            <label for="errorType" class="form-label">Error Type:</label>
            <select class="form-control" id="errorType" name="errorType">
                <option value="Missing_Features">Missing Features</option>
                <option value="Interpolation_Error">Interpolation Error</option>
                <option value="Material_Error">Material Error</option>
                <option value="Accuracy">Accuracy</option>
                <option value="STL_Error">STL Error</option>
                <option value="Ngons_Error">Ngons Error</option>
            </select>
        </div>
        <div class="mb-3">
            <label for="buildingNumber" class="form-label">Building Number:</label>
            <input type="text" class="form-control" id="buildingNumber" name="buildingNumber" onblur="formatBuildingNumber()" maxlength="10" pattern="B\d{9}" title="Building number must be prefixed with 'B' followed by 9 digits.">
        </div>
        <div class="mb-3">
            <label for="qcError" class="form-label">QC Error Image:</label>
            <div class="drop-zone" id="qcErrorDropZone">
                Drag and drop QC error image here or click to select file
            </div>
            <input type="file" class="form-control file-input" id="qcError" name="qcError" accept="image/*">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="useQcForAll" name="useQcForAll">
                <label class="form-check-label" for="useQcForAll">
                    Use QC error image for all errors
                </label>
            </div>
        </div>        
        <div class="mb-3">
            <label for="mError" class="form-label">Material Error Image:</label>
            <div class="drop-zone" id="mErrorDropZone">
                Drag and drop material error image here or click to select file
            </div>
            <input type="file" class="form-control file-input" id="mError" name="mError" accept="image/*">
        </div>
        <div class="mb-3">
            <label for="corrected" class="form-label">Corrected Image:</label>
            <div class="drop-zone" id="CorrectedDropZone">
                Drag and drop corrected image here or click to select file
            </div>
            <input type="file" class="form-control file-input" id="corrected" name="corrected" accept="image/*">
        </div>
        <button type="submit" class="btn btn-primary">Upload</button>
        <a href="/view" class="btn btn-secondary">View Uploaded Images</a>
    </form>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        const setupDropZone = (dropZoneId, fileInputId) => {
            const dropZone = document.getElementById(dropZoneId);
            const fileInput = document.getElementById(fileInputId);
            dropZone.onclick = () => fileInput.click();
            dropZone.ondragover = dropZone.ondragenter = function(evt) {
                evt.preventDefault();
                dropZone.classList.add('hover');
            };
            dropZone.ondragleave = function(evt) {
                dropZone.classList.remove('hover');
            };

            dropZone.ondrop = function(evt) {
                evt.preventDefault();
                dropZone.classList.remove('hover');
                const files = evt.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    dropZone.classList.add('success');
                }
            };

            fileInput.onchange = () => {
                if (fileInput.files.length > 0) {
                    dropZone.classList.add('success');
                }
            };
            dropZone.ondrop = function(evt) {
                evt.preventDefault();
                dropZone.classList.remove('hover');
                const files = evt.dataTransfer.files;
                if (files.length > 0) {
                    fileInput.files = files;
                    dropZone.classList.add('success');
                    // Check if the "useQcForAll" checkbox is checked and apply the same file to other inputs
                    if (dropZoneId === "qcErrorDropZone" && document.getElementById('useQcForAll').checked) {
                        const mErrorInput = document.getElementById('mError');
                        const mErrorDropZone = document.getElementById('mErrorDropZone');
                        mErrorInput.files = files;
                        mErrorDropZone.classList.add('success');
                    }
                }
            };
        };

        setupDropZone("qcErrorDropZone", "qcError");
        setupDropZone("mErrorDropZone", "mError");
        setupDropZone("CorrectedDropZone", "corrected");
    });
</script>
</body>
</html>
